name: Force Override README First Line

on:
  schedule:
    # 每天 UTC 时间 0 点运行（北京时间 8 点，cron 表达式可自定义）
    - cron: "0 0 * * *"
  workflow_dispatch:  # 允许手动触发

jobs:
  override-readme:
    runs-on: ubuntu-latest
    steps:
      # 1. 检出你的仓库（需写入权限）
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ACTION_TOKEN }}  # 使用指定名称的 Token

      # 2. 下载目标 README.md（支持私有仓库）
      - name: Download target README
        run: |
          # 公开仓库：
          curl -s -o external.md https://github.com/toshare5/toshare5.github.io/blob/main/README.md

          # 私有仓库需添加 Token 授权：
          # curl -H "Authorization: token ${{ secrets.ACTION_TOKEN }}" -o external.md https://raw.githubusercontent.com/<目标用户>/<目标仓库>/main/README.md

      # 3. 强制提取目标行（示例：第 3 行）
      - name: Extract line
        id: extract-line
        run: |
          # 提取行内容（行号可调）
          TARGET_LINE=$(sed -n '29p' external.md)

# 若目标行不存在则报错退出或执行其他操作
if [ -z "$TARGET_LINE" ]; then
  echo "警告：目标行不存在，文件行数少于29行。"
  # 你可以选择退出脚本，或者执行其他操作
  # exit 1  # 如果你希望脚本在行数不足时退出，可以取消注释这行
else
  # 转义特殊字符（防止 sed 解析错误）
  ESCAPED_LINE=$(echo "$TARGET_LINE" | sed 's/[\/&]/\\&/g; s/"/\\"/g')
  
  # 保存到环境变量
  echo "NEW_CONTENT=$ESCAPED_LINE" >> $GITHUB_ENV
fi

          # 转义特殊字符（防止 sed 解析错误）
          ESCAPED_LINE=$(echo "$TARGET_LINE" | sed 's/[\/&]/\\&/g; s/"/\\"/g')

          # 保存到环境变量
          echo "NEW_CONTENT=$ESCAPED_LINE" >> $GITHUB_ENV

      # 4. 强制覆盖 README 第一行
      - name: Override first line
        run: |
          # 创建临时文件并覆盖第一行
          echo "${{ env.NEW_CONTENT }}" > temp.md
          tail -n +2 README.md >> temp.md
          mv temp.md README.md

      # 5. 提交并强制推送
      - name: Commit changes
        uses: EndBug/add-and-commit@v9
        with:
          message: "自动强制覆盖第一行"
          add: README.md
          force: true  # 强制覆盖 Git 历史
